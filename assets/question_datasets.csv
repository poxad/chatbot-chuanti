question,question_image,a,b,c,d,e,f,g,h,answer,answer_alpha
"Given the variables a, b, and c, what are their final values after the program has executed?",previewqs2.png,"a=180, b=200, c=300","a=180, b=50, c=300","a=200, b=180, c=100","a=50, b=50, c=100",,,,,"a=180, b=50, c=300",b
What will be the outputs of ans1 and ans2 from the following C++ code?,previewqs3.jpg,"ans1: 103, ans2:304.5","ans1: 104, ans2:304.5","ans1:103, ans2:104.5","ans1:304, ans2:304.5","ans1:303, ans2:104.5",compile error,,,"ans1: 103, ans2:304.5",a
,previewqs4.png,A,B,C,D,,,,,D,d
,previewqs6.png,Table (A),Table (B),Table (C),Table (D),,,,,Table (C),c
,previewqs8.png,"(Expression1, Expression2) = (144, 4.8)","(Expression1, Expression2) = (145, 5.0)","(Expression1, Expression2) = (Error, 4.5)","(Expression1, Expression2) = (144, 4.5)","(Expression1, Expression2) = (Error, 4.8)",,,,"(Expression1, Expression2) = (Error, 4.8)",e
,previewqs9.png,Line 51:  if (curr -> data == val){,Line 51: if (curr -> next -> data ==val){,Line 52: Node* temp  = curr,Line 52: Node* temp = curr-> next,Line 53: curr -> next = temp,,,,"Line 51: if (curr -> next -> data ==val){,Line 52: Node* temp = curr-> next","b,d"
"You are a fan of VTubers, the rise of virtual artists makes you think that a new music platform dedicated for them might be a great hit.  You plan to implement these two features: playlist – sequence of songs to be played banner - on the homepage, highlight different songs from to time Here is a memo you have written down while brainstorming: // don’t need shuffle, but support random insert/remove typedef AAA playlist; // need to keep up with current event, e.g. new release typedef BBB banner; You have already defined a struct to store song information.  You also have written two data structure templates: array<T> and linked_list<T>.  What might be an appropriate data structure to store the playlist (AAA) and banner (BBB)?",previewqs10.png,AAA = array<song> BBB = linked_list<song>,AAA = linked_list<song> BBB = array<song> ,AAA = array<song> BBB = array<song>,AAA = linked_list<song> BBB = linked_list<song>,,,,,AAA = linked_list<song> BBB = array<song>,b
"As shown is a function attempting to convert a matrix to sparse matrix. Code not relevant to the question is not included. Part of the hot code is redacted, assuming undocumented functions and variables are named sensibly according to their purposes, which of the following is most likely to be AAA, BBB, CCC and DDD, if the node is stored in a conventional way?",previewqs11.png,AAA=i BBB=j CCC=right DDD=down,AAA=j BBB=i CCC=right DDD=down,AAA=i BBB=j CCC=down DDD=right,AAA=j BBB=i CCC=down DDD=right,,,,,AAA=j BBB=i CCC=down DDD=right,d
,previewqs12.png,A,B,C,D,E,F,G,H,"A,C,F,G","a,c,f,g"
,previewqs14.png,A,B,C,D,,,,,C,c
,previewqs15.png,A,B,C,D,,,,,A,a
What is NOT the possible DFS of the following graph?,previewqs16.png,ABDICEGHF,DHGFCEBIA,DCEHGFBAI,AIDHGFBEC ,,,,,DHGFCEBIA,b
Which of the following statements about Kruskal's algorithm and Prim's algorithm is wrong?,,Both of them are greedy algorithms.,"Through these two algorithms, we may not get the same minimum-cost spanning tree.",Prim’s algorithm runs faster in sparse graphs; Kruskal’s algorithm runs faster in dense graphs.,"They are both algorithms for finding the minimum spanning tree of a connected, weighted undirected graph.",,,,,Prim’s algorithm runs faster in sparse graphs; Kruskal’s algorithm runs faster in dense graphs.,c
,previewqs19.png,11,9,7,infinity,,,,,9,b
,previewqs20.png,A,B,C,D,,,,,A,a
,previewqs22.png,A,B,C,D,E,F,,,"D,F","d,f"
